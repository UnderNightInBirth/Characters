btl_debPrint2("\n[RIE_CommandTable.txt]");

local t =
{
	Atk_Std6B = {},
	Atk_Cro3B = {},
	Atk_Std6C = {},
	Atk_Air6B = {},
	Atk_Air6C = {},

	Skill_236A = {},
	Skill_236BorC = {},
	Skill_236EX = {},

	Skill_623EX =
    {
        num = def_CN_Skill_623EX,
        name = "Cmd_Skill_623EX",
        command = ["623C"],
        usegauge = 10000,
        UpdateTable = { name = "Mv_Skill_623EX", }
        CmdCheck = { Cost = { ComboGauge = 10000 }, SkillType = "ExSpecial" },
	},
    Skill_623BorC = {},
	Skill_623A = {},


	Skill_214A = {},
	Skill_214B = {},
	Skill_214C = {},
	Skill_63214EX = {
        command = ["214214C","214+B+C"],
	},

    // Skill_0202D = {}, // Debug, hide cockpit

	Throw_A = {},
	
	Skill_CancelRoll =
	{
		num = def_CN_Atk_DashAdd,
		command = ["6+A+B"],
		flags = [ "lastdelay" ],
		function CmdBeforeFunc()
		{
			if( BMvTbl.GetPP(def_PP_CmdStatus)&def_PP_CS_DoujiDash_F )
			{
				return 0;
			}
			if( Battle_Std.MoveCode.CheckFlag(def_MC_Skill) )
			{
				local hs = BMvTbl.GetMvHitStatus();
				if( !(  hs.Type & _HitType_Hit ) )
				{
					return 0;
				}
			}
			return 1;
		},
		CmdCheck = 
		{
			SkillType = "None", MvCheck = { DoujiOnly = ["Mv_DashWait_F","Mv_Dash_F"] }
		},
		
		UpdateTable = { name = "Mv_Skill_CancelRoll", }	
	}

	Atk_StdBandC = {},
    Atk_AirBandC = {
		function CmdBeforeFunc()
		{
			local isAnyCancel = BCMDTbl.CheckCancel( _SkillType_ExSpecial|_SkillType_Special|_SkillType_Normal );
			local movable = Battle_Std.MoveCodeEx.CheckFlag( 3, def_MC3_FromNoCancelMv );	
			if (isAnyCancel && movable == 1) 
			{ return 0; }
			
		}
	}, // reused as air dodge, not the air bc TODO framedata

	Skill_41236SP = {},
    Skill_41236SP_ABC = {},
	Skill_0202EX = {},
	
	Skill_020202EX = {
		command = [ "@R,1@C","41236^C","63214^C", "4136^C","6314^C","4236^C","4126^C","6214^C","6324^C" ], usegauge = 20000,
		Cost = { ComboGauge = 20000 },
		CmdCheck = { SkillType="ExSpecialJump", Cost = { ComboGauge = "OverLiberate" } } , //idk about exspecialjump, but this wont be air usable anyway :D
		function CmdBeforeFunc()
		{
			return( (BMvEff.Liberate_Get() == 2) ) ? 1 : 0;
		},
	},	
}

//Check and Reset are the same thing, Mv and Tmpl
//UpdateMoveName appears when CheckMoveName
local ar =
[
	{
		CheckMoveName="Mv_Atk_StdA",
		UpdateMoveName="Mv_Atk_StdB",
	},
	{
		ResetTmplName="Atk_StdB",
		CheckMoveName="Mv_Atk_StdB",
		UpdateMoveName="Mv_Atk_Std6B",
	},
	{
		ResetTmplName="Atk_Std6B",
		CheckMoveName="Mv_Atk_Std6B",
		UpdateMoveName="Mv_Atk_StdC",
	},
	{
		ResetTmplName="Atk_StdC",
		CheckMoveName="Mv_Atk_StdC",
		UpdateMoveName="Mv_Skill_SSRelayAtk",
		CmdCheck = 
		{
			SkillType = "AddCommand",
			FrameIDCheck = { Only = [900,910] },
		}
		CmdTmplFlags=def_CMDFlags_AnnounceSmaetSteer,
	},
	{
		CheckMoveName="Mv_Skill_SSRelayAtk",
		UpdateMoveName="Mv_Skill_41236SP",
		CmdCheck = 
		{
			Cost = { ComboGauge = 20000 },
			SkillType = "SpSpecial",
			HitStatus="Damage",
		}
	},
]

Battle_Std.MakeStdCombo( t, ar );

RIES_CommandTable <- Battle_Std.MakeCommandTable( { command=t } );
